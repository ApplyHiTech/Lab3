# -*- coding: utf-8 -*-
"""
Created on Thu Nov  5 17:03:46 2015

@author: francescoperera
"""

import datetime as dt
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import pandas as pd

sedentaryThreshold=[5000]
lowActiveThreshold=[7499]
somewhatActiveThreshold=[9999]
highlyActiveThreshold=[12500]
sleepLowerThreshold=[6.5]
sleepUpperThreshold=[8]

############ Moves analysis

def movesFileReader(x):
    """"
    movesFileReader gets the moves csv file as input, parses the file and generates two lists as outputs.
    The first list contains all the dates and the second list contains the number of steps per day
    """
    #DataList = []
    dates=[]
    newDates=[]
    stepsPerDay=[]
    movesFile=open(x)
    for line in movesFile:
        row=line.strip().split(',')
        if row[1]=="walking":
            dates.append(row[0])
            stepsPerDay.append(row[5])   
    for date in dates:
        if len(date)==8:
            newDate=date[:6]+"20"+date[6:]
        elif len(date)==7:
            newDate=date[:5]+"20"+date[5:]
        newDates.append(newDate)
    movesFile.close()
    return (newDates,stepsPerDay)
    
def plotMoves(xData,yData):
    """
    plotMoves takes two input lists ( dates and steps) and generates a line chart. This function also plots the
    threshold values so that the generated line chart can be compared to these thresholds.
    """
    xDate=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData ]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    locator = mdates.DayLocator()
    locator.MAXTICKS = 4000
    plt.gca().xaxis.set_major_locator(locator)  
    plt.plot(xDate,yData,'ob-')
    plt.plot(xDate,sedentaryThreshold *len(xData),'r')
    plt.plot(xDate,lowActiveThreshold *len(xData),'g')
    plt.plot(xDate,somewhatActiveThreshold *len(xData),'c')
    plt.plot(xDate,highlyActiveThreshold *len(xData),'m')
    plt.setp(plt.xticks()[1], rotation=60)
    plt.show()

def overlappingPlotMoves(xData,yData1,xData2,yData2):
    """"
    overlappingPlotMoves plots the line chart for dates vs steps for two different patients on the same figure.
    """
    xDate=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData ]
    xDate2=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData2 ]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    locator = mdates.DayLocator()
    locator.MAXTICKS = 4000
    plt.gca().xaxis.set_major_locator(locator)
    plt.plot(xDate,yData1,'ob-') # blue color is Francesco
    plt.plot(xDate2,yData2,'ok-')# black color is Daniel
    plt.plot(xDate2,sedentaryThreshold *len(xData2),'r')
    plt.plot(xDate2,lowActiveThreshold *len(xData2),'g')
    plt.plot(xDate2,somewhatActiveThreshold *len(xData2),'c')
    plt.plot(xDate2,highlyActiveThreshold *len(xData2),'m')
    plt.setp(plt.xticks()[1], rotation=60)
    plt.show()

def movesAnalysis(x,y):
    """
    main Moves function that takes the moves csv file from two patients and executes movesFileReader,plotMoves
    and overlappingPlotMoves. The output are three charts.
    """
    xval,yval=movesFileReader(x)
    xval2,yval2=movesFileReader(y)
    plotMoves(xval,yval)
    plotMoves(xval2,yval2)
    overlappingPlotMoves(xval,yval,xval2,yval2)

####### Self Report Analysis    
def selfReportReader(x):
    """
    this function takes the self report csv file and divides into two different csv files
    one for francesco and for daniel. These two csv files will be run on other functions
    This function is executed only once because it generates two csv files. Executing more than once
    would create copies of existing csv patient files
    """
    df = pd.read_csv(x)
    #Convert Sleep column so we can deal with ints
    df.loc[df.Sleep=='4-5', 'Sleep'] = 4.5
    df.loc[df.Sleep=='5-6', 'Sleep'] = 5.5
    df.loc[df.Sleep=='6-7', 'Sleep'] = 6.5
    df.loc[df.Sleep=='7-8', 'Sleep'] = 7.5
    df2= df[['Timestamp','Sleep','ID']]
    df2.sort('Timestamp').groupby('ID')

    #Daniel's D.f. columns=Date,Sleep
    #Francesco's data frames columns=Date,Sleep
    df_Daniel= df2.loc[df2['ID'] == 'Daniel']
    df_Francesco = df2.loc[df2['ID']=='Francesco']
    df_Daniel.to_csv('Daniel_sleep.csv')
    df_Francesco.to_csv('Francesco_sleep.csv')

def sleepTimeGenerator(x):
    """
    sleepTimeGenerator takes a csv file and parses it to generate two lists, the first list contains dates and 
    the second list contains the number of hours slept.
    """
    sleepHours=[]
    dates=[]
    sleepFile=open(x)
    for line in sleepFile:
        row=line.strip().split(',')
        dates.append(row[1])
        sleepHours.append(row[2])
    dates.pop(0)
    sleepHours.pop(0)
    return (dates,sleepHours)
    

def plotSelfReport(xData,yData):
    """
    plotSelfReport takes the output from sleepTimeGenerator and creates a line chart which is then compared 
    to the threshold line charts ( also generated by plotSelfReport).
    """
    xDate=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData ]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    locator = mdates.DayLocator()
    locator.MAXTICKS = 4000
    plt.gca().xaxis.set_major_locator(locator)
    plt.gca().set_ylim([4,8.5]) # the y-axis was set between 4 and 8.5 to provide 
    plt.plot(xDate,yData,'og-')
    plt.plot(xDate,sleepLowerThreshold *len(xData),'r')
    plt.plot(xDate,sleepUpperThreshold *len(xData),'r')
    plt.setp(plt.xticks()[1], rotation=60)
    plt.show()
    
def overlappingSelfReport(xData,yData,xData2,yData2):
    """
    overlappingSelfReport takes  4 inputs (lists) and charts two line charts and two threshold line charts in the same figure.
    The 4 inputs are  dates for patient 1, number of hours slept by patient 1, dates for patient 2, number of hours slept by patient 2.
    """
    xDate=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData ]
    xDate2=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData2 ]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    locator = mdates.DayLocator()
    locator.MAXTICKS = 4000
    plt.gca().xaxis.set_major_locator(locator)
    plt.gca().set_ylim([4,8.5]) # the y-axis was set between 4 and 8.5 to provide 
    plt.plot(xDate,yData,'ob-')
    plt.plot(xDate2,yData2,'ok-')
    plt.plot(xDate,sleepLowerThreshold *len(xData),'r')
    plt.plot(xDate,sleepUpperThreshold *len(xData),'r')
    plt.setp(plt.xticks()[1], rotation=60)
    plt.show()
    
def selfReportAnalysis(x,y):
    """
    main Self Report function that takes the self report csv file from two patients and executes sleepTimeGenerator,plotSelfReport
    and overlappingSelfReport. The output are three charts.
    This function must be ran after running selfReportReader
    """
    xval,yval=sleepTimeGenerator(x)
    xval2,yval2=sleepTimeGenerator(y)
    plotSelfReport(xval,yval)
    plotSelfReport(xval2,yval2)
    overlappingSelfReport(xval,yval,xval2,yval2)

######### Empatica Analysis
def empaticaReader(x):
    """
    empaticaReader takes the empatica csv file, parses through it and creates three lists( a dates list,
    a RHR list for patient 1) and a RHR list for patient 2).
    """
    #DataList = []
    dates=[]
    newDates=[]
    hrFrancesco=[]
    hrDaniel=[]
    hrFile=open(x)
    for line in hrFile:
        row=line.strip().split(',')
        dates.append(row[0])
        hrDaniel.append(row[1])
        hrFrancesco.append(row[2]) 
    dates.pop(0)
    hrFrancesco.pop(0)
    hrDaniel.pop(0)
    for date in dates:
        if len(date)==8:
            newDate=date[:6]+"20"+date[6:]
        elif len(date)==7:
            newDate=date[:5]+"20"+date[5:]
        newDates.append(newDate)
    hrFile.close()
    return (newDates,hrFrancesco,hrDaniel)

def plotEmpatica(xData,yData1,):
    """
    plotEmpatics takes the output of empaticaReader as inputs and generates a line chart for RHR.
    """
    xDate=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData ]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    locator = mdates.DayLocator()
    locator.MAXTICKS = 4000
    plt.gca().xaxis.set_major_locator(locator)
    plt.plot(xDate,yData1,'ok-')
    plt.setp(plt.xticks()[1], rotation=60)
    plt.show()

def overlappingPlotEmpatica(xData,yData1,yData2):
    """
    overlappingPlotEmpatica takes allt the outputs of empaticaReader and generates a plot with two RHR line charts.
    """
    xDate=[dt.datetime.strptime(date,'%m/%d/%Y') for date in xData ]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
    locator = mdates.DayLocator()
    locator.MAXTICKS = 4000
    plt.gca().xaxis.set_major_locator(locator)
    plt.plot(xDate,yData1,'ob-') # blue is francesco
    plt.plot(xDate,yData2,'ok-') # black is daniel
    plt.setp(plt.xticks()[1], rotation=60)
    plt.show()

def empaticaAnalysis(x):
    """
    main  Empatica function that takes the empatica csv file and executes empaticaReader,plotEmpatica
    and overlappingPlotEmpatica. The output are three charts.
   
    """
    dates,hrPatient1,hrPatient2=empaticaReader(x)
    plotEmpatica(dates,hrPatient1) #hrPatient1=Francesco
    plotEmpatica(dates,hrPatient2) #hrPatient2=Daniel
    overlappingPlotEmpatica(dates,hrPatient1,hrPatient2)
    
if __name__ == '__main__': 
    """
    1.The first plot is the moves plot for Francesco
    2.The second plot is the moves plot for Daniel
    3.The third plot is the overlapping moves plot with Francesco and Daniel
    4.The fourth plot is the self report plot for Francesco
    5.The fifth plot is the self report plot for Daniel
    6.The sixth plot is the overlapping self report plot with Francesco and Daniel
    7.The seventh plot is the empatica plot for Francesco
    8.The eighth plot is the empatica plot for Daniel
    9. The ninth plot is the overlappin empatica plot with Francesco and Daniel
    """
    # this function only needs to run once to generate Francesco_sleep.csv and Daniel_sleep.csv
    #selfReportReader('selfreport.csv')
    movesFrancesco='Francesco_summary.csv' # this csv file is the moves csv file for Francesco
    movesDaniel='Daniel_summary.csv' # this csv file is the moves csv file for Daniel
    selfReportFrancesco='Francesco_sleep.csv' # this csv file is self report file for Francesco
    selfReportDaniel='Daniel_sleep.csv' # this csv file is the self report file for Daniel
    restingHeartRate='HeartRate.csv'# this csv file is the empatica File
    movesAnalysis(movesFrancesco,movesDaniel)
    selfReportAnalysis(selfReportFrancesco,selfReportDaniel)
    empaticaAnalysis(restingHeartRate)

    

